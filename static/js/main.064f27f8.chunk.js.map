{"version":3,"sources":["components/GameCard/GameCard.js","components/Header/Header.js","components/Wrapper/index.js","components/Container/Container.js","components/Game/Game.js","App.js","serviceWorker.js","index.js"],"names":["GameCard","props","react_default","a","createElement","className","onClick","handleClick","id","alt","name","src","image","Header","score","topScore","Wrapper","children","Container","Game","state","data","shuffleCards","sort","b","Math","random","resetCards","resetData","map","item","Object","objectSpread","clicked","_this","correctGuess","newData","newScore","newTopScore","max","setState","incorrectGuess","gameCardClick","guessedCorrectly","console","log","_this2","this","components_Wrapper","components_Container_Container","components_Header_Header","components_GameCard_GameCard","key","Component","App","components_Game_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"68BAWeA,SARE,SAAAC,GAAK,OACpBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,QAAS,kBAAML,EAAMM,YAAYN,EAAMO,MAC3DN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKK,IAAKR,EAAMS,KAAMC,IAAKV,EAAMW,YCMxBC,SATA,SAAAZ,GAAK,OAChBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,eACAH,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,MAAII,GAAG,SAAP,UAAuBP,EAAMa,MAA7B,iBAAkDb,EAAMc,oBCArDC,MAJf,SAAiBf,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMgB,kBCE1BC,SAHG,SAAAjB,GAAK,OACnBC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aAAaJ,EAAMgB,YCwFxBE,6MAnFbC,MAAQ,CACNC,OACAP,MAAO,EACPC,SAAU,KAKZO,aAAe,SAAAD,GAEb,OADcA,EAAKE,KAAK,SAAUpB,EAAGqB,GAAK,MAAO,GAAMC,KAAKC,cAK9DC,WAAa,SAAAN,GACX,IAAMO,EAAYP,EAAKQ,IAAI,SAAAC,GAAI,OAAAC,OAAAC,EAAA,EAAAD,CAAA,GAAUD,EAAV,CAAgBG,SAAS,MAGxD,OAAOC,EAAKZ,aAAaM,MAI3BO,aAAe,SAAAC,GACb,IAAIC,EAAWH,EAAKd,MAAMN,MAC1BuB,IACA,IAAIC,EAAcb,KAAKc,IAAIF,EAAUH,EAAKd,MAAML,UAEhDmB,EAAKM,SAAS,CACVnB,KAAMa,EAAKZ,aAAac,GACxBtB,MAAOuB,EACPtB,SAAUuB,OAMhBG,eAAiB,SAAAL,GACfF,EAAKM,SAAS,CACVnB,KAAMa,EAAKP,WAAWS,GACtBtB,MAAO,OAKb4B,cAAgB,SAAAlC,GACd,IAAImC,GAAmB,EACvBC,QAAQC,IAAI,gBAAiBF,GAE7B,IAAMP,EAAUF,EAAKd,MAAMC,KAAKQ,IAAI,SAAAC,GAOlC,OANIA,EAAKtB,KAAOA,IACVsB,EAAKG,UACPH,EAAKG,SAAU,EACfU,GAAmB,IAGhBb,IAITa,EAAmBT,EAAKC,aAAaC,GAAWF,EAAKO,eAAeL,4EAI7D,IAAAU,EAAAC,KACP,OACE7C,EAAAC,EAAAC,cAAC4C,EAAD,KACA9C,EAAAC,EAAAC,cAAC6C,EAAD,KACE/C,EAAAC,EAAAC,cAAC8C,EAAD,CAAQpC,MAAOiC,KAAK3B,MAAMN,MAAOC,SAAYgC,KAAK3B,MAAML,YAErDgC,KAAK3B,MAAMC,KAAKQ,IAAI,SAACC,GAAD,OACrB5B,EAAAC,EAAAC,cAAC+C,EAAD,CACEC,IAAKtB,EAAKtB,GACVA,GAAIsB,EAAKtB,GACTI,MAAOkB,EAAKlB,MACZqB,QAASH,EAAKG,QACd1B,YAAauC,EAAKJ,0BA7EXW,aCFJC,EAFH,kBAAMpD,EAAAC,EAAAC,cAACmD,EAAD,OCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.064f27f8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./GameCard.css\";\r\n\r\nconst GameCard = props => (\r\n  <div className=\"card\" onClick={() => props.handleClick(props.id)}>\r\n    <div className=\"img-container\">\r\n      <img alt={props.name} src={props.image} />\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default GameCard;","import React from \"react\";\r\nimport \"./Header.css\";\r\n\r\nconst Header = props => (\r\n    <div className=\"header\">\r\n        <h1 className=\"title\">Memory Game</h1>\r\n        <ul>\r\n            <li id=\"score\">Score: {props.score} | Top Score: {props.topScore}</li>\r\n        </ul>\r\n    </div>\r\n);\r\n\r\nexport default Header;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Container = props => \r\n    <main className=\"container\">{props.children}</main>;\r\n\r\nexport default Container;","import React, { Component } from 'react';\r\nimport GameCard from \"../GameCard\";\r\nimport Header from \"../Header\";\r\nimport Wrapper from \"../Wrapper\";\r\nimport data from \"../../data.json\";\r\nimport Container from \"../Container\";\r\n\r\nclass Game extends Component {\r\n\r\n  state = {\r\n    data,\r\n    score: 0,\r\n    topScore: 0,\r\n    // message: \"Click on a new image every time to score!\"\r\n  }\r\n\r\n  // card data is randomized\r\n  shuffleCards = data => {\r\n    let newData = data.sort(function (a, b) { return 0.5 - Math.random() });\r\n    return newData;\r\n  };\r\n\r\n  // all clicked props changed to false\r\n  resetCards = data => {\r\n    const resetData = data.map(item => ({ ...item, clicked: false }));\r\n    // console.log(data);\r\n    // console.log(resetData);\r\n    return this.shuffleCards(resetData);\r\n  };\r\n\r\n  // correctly guessed data\r\n  correctGuess = newData => {\r\n    let newScore = this.state.score;\r\n    newScore++\r\n    let newTopScore = Math.max(newScore, this.state.topScore);\r\n\r\n    this.setState({\r\n        data: this.shuffleCards(newData),\r\n        score: newScore,\r\n        topScore: newTopScore,\r\n        // animation: \"\"\r\n    })\r\n  }\r\n\r\n  // game is reset with new card formation - runs resetCards function\r\n  incorrectGuess = newData => {\r\n    this.setState({\r\n        data: this.resetCards(newData),\r\n        score: 0\r\n    })\r\n  }\r\n\r\n  // upon card click, function checks if card has been clicked before - update clicked property for cards\r\n  gameCardClick = id => {\r\n    let guessedCorrectly = false;\r\n    console.log(\"correct guess\", guessedCorrectly);\r\n    // newData contains an array with the updated click properties\r\n    const newData = this.state.data.map(item => {\r\n      if (item.id === id) {\r\n        if(!item.clicked) {\r\n          item.clicked = true;\r\n          guessedCorrectly = true;\r\n        }\r\n      }\r\n      return item;\r\n    });\r\n    // main function for handling correct and incorrect guessed\r\n    // if guessedCorrectly = true, correctGuess function initialized, if guessed wrong, incorrectGuess function initalized\r\n    guessedCorrectly ? this.correctGuess(newData) : this.incorrectGuess(newData);\r\n  };\r\n\r\n  // react render method renders the data\r\n  render() {\r\n    return (\r\n      <Wrapper>\r\n      <Container>\r\n        <Header score={this.state.score} topScore = {this.state.topScore} />\r\n      </Container>\r\n          {this.state.data.map((item) =>\r\n          <GameCard\r\n            key={item.id}\r\n            id={item.id}\r\n            image={item.image}\r\n            clicked={item.clicked}\r\n            handleClick={this.gameCardClick}\r\n          />\r\n          )}\r\n      </Wrapper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;","import React from 'react';\nimport Game from \"./components/Game\";\n\nconst App = () => <Game />;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}